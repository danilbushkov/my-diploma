// Клиентская часть

// Компонент редактора

import { For, JSX, Show, createEffect, createSignal, onMount } from "solid-js";
import { createStore } from "solid-js/store";
import {
  handleMouseMove,
  getDeleteComponentHandler,
  getAddSelectedComponentHandler,
  getSelectComponentHandler,
  getFinishConnectionHandler,
  handleMouseUp,
  handleMouseDown,
  getDeleteConnectionHandler,
} from "./eventHandlers";
import { Component } from "./components/Component";
import EditorController from "./EditorController";

import "./Editor.css";

import { ExtendedComponentData } from "./EditorController/EditorStorage/ComponentStorage/types";
import { SpecificComponentCreator } from "./EditorController/SpecificComponent";

import { ConditionComponentCreator } from "./EditorController/components/ConditionComponent";
import { Line, LinePosition } from "./components/Line";
import { BotStatus, EditorProps, LineData } from "./types";
import { EditorClient } from "./EditorController/api/EditorClient";
import { A, useNavigate } from "@solidjs/router";
import { MessageComponentCreator } from "./EditorController/components/MessageComponent";
import { TextInputComponentCreator } from "./EditorController/components/TextInputComponent";
import { FormatComponentCreator } from "./EditorController/components/FormatComponent";
import { ButtonComponentCreator } from "./EditorController/components/ButtonComponent";
import BotClient from "~/api/bot/BotClient";

export default function Editor(props: EditorProps) {
  const [componentStore, setComponentStore] = createStore<
    Record<number, ExtendedComponentData>
  >({});
  const [addingComponentContent, setAddingComponentContent] = createSignal<
    (() => JSX.Element) | undefined
  >(undefined);
  const [addingComponentPosition, setAddingComponentPosition] = createSignal({
    x: 0,
    y: 0,
  });
  const [userSelect, setUserSelect] = createSignal(true);
  const [scale, setScale] = createSignal(1);
  const [line, setLine] = createSignal<LineData | undefined>(undefined);
  const [lines, setLines] = createStore<Record<string, LineData>>({});
  const [loading, setLoading] = createSignal(false);
  const [error, setError] = createSignal<Error | undefined>();
  const [errors, setErrors] = createSignal<Array<Error>>([]);
  const [botStatus, setBotStatus] = createSignal(BotStatus.Stopped);
  createEffect(() => {
    if (error()) {
      const err = error() as Error;
      setErrors((errors) => [...errors, err]);

      setTimeout(() => {
        setErrors((errors) => errors.filter((error) => error != err));
      }, 5000);
    }
  });

  // eslint-disable-next-line solid/reactivity
  const logger = props.logger;

  const navigate = useNavigate();
  const editor: EditorController = new EditorController(
    {
      componentStore: [componentStore, setComponentStore],
      addingComponent: {
        setContent: setAddingComponentContent,
        setPosition: setAddingComponentPosition,
      },
      setUserSelect: setUserSelect,
      scale: {
        get: scale,
        set: setScale,
      },
      line: {
        set: setLine,
      },
      lineStore: [lines, setLines],
      setLoading: setLoading,
      navigate: navigate,
      error: {
        set: setError,
      },
      bot: {
        status: {
          set: setBotStatus,
          get: botStatus,
        },
      },
    },
    // eslint-disable-next-line solid/reactivity
    new EditorClient(props.httpClient, props.token, props.botId, 1),
    logger
  );
  onMount(() => {
    editor.init();
  });

  const [showComponentSelection, setShowComponentSelection] =
    createSignal(false);
  const componentCreatorList: Array<SpecificComponentCreator> = [
    new ConditionComponentCreator(editor),
    new MessageComponentCreator(editor),
    new TextInputComponentCreator(editor),
    new FormatComponentCreator(editor),
    new ButtonComponentCreator(editor),
  ];
  return (
    <div
      id="editor-area"
      ref={(editorArea) => {
        editor.setEditorArea(editorArea);
      }}
      data-editor-area
      onMouseMove={[handleMouseMove, editor]}
      onMouseUp={[handleMouseUp, editor]}
      onMouseDown={[handleMouseDown, editor]}
      style={{
        "user-select": !userSelect() ? "none" : undefined,
      }}
    >
      <div class="fixed-area no-events">
        <div class="editor-errors">
          <For each={errors()}>
            {(error) => (
              <div class="editor-error">
                <div class="error">{error.message}</div>
              </div>
            )}
          </For>
        </div>

        <div class="scale-buttons events">
          <button class="green-button" onClick={() => editor.zoomIn()}>
            +
          </button>
          <div class="separator"> </div>
          <button class="blue-button" onClick={() => editor.zoomOut()}>
            {" "}
            -{" "}
          </button>
        </div>
        <div id="editor-menu-panel" class="events">
          <A href="/bots" class="blue-button">
            Bot list
          </A>
          <div class="separator"> </div>
          <Show
            when={botStatus() == BotStatus.Stopped}
            fallback={
              <button onClick={() => editor.stopBot()} class="yellow-button">
                Stop bot
              </button>
            }
          >
            <A
              href={"/bots/" + props.botId + "/start?prev=edit"}
              class="green-button"
            >
              Start bot
            </A>
          </Show>
          <div class="separator"> </div>
          <Show when={loading()}>
            <div class="loading">Loading...</div>
          </Show>
        </div>
        <Show
          when={showComponentSelection()}
          fallback={
            <button
              class="events blue-button show-panel-btn"
              onClick={() => setShowComponentSelection(true)}
            >
              {"->"}
            </button>
          }
        >
          <div id="component-selection-panel" class="events">
            <button
              class="hide-panel-btn blue-button"
              onClick={() => {
                setShowComponentSelection(false);
              }}
            >
              {"<-"}
            </button>
            <div class="component-list">
              <For each={componentCreatorList}>
                {(creator) => (
                  <div
                    class="component reduce"
                    onMouseDown={(event: MouseEvent) => {
                      editor.startAddingComponent(event, creator);
                    }}
                  >
                    <div class="no-events">{creator.content()}</div>
                  </div>
                )}
              </For>
            </div>
          </div>
        </Show>
        <Show when={addingComponentContent()}>
          <div
            class="scaling"
            style={{
              transform: `scale(${scale()})`,
            }}
          >
            <div
              class="component absolute adding-component"
              style={{
                top: addingComponentPosition().y + "px",
                left: addingComponentPosition().x + "px",
              }}
            >
              {addingComponentContent()?.()}
            </div>
          </div>
        </Show>
      </div>
      <div
        class="scaling"
        style={{
          transform: `scale(${scale()})`,
        }}
      >
        <For each={Object.values(componentStore)}>
          {(component) => {
            const componentStyle = {
              width: 100, //px
              connectionPointSize: 20, //px
            };
            return (
              <Component
                scale={scale()} //editor.getEditorData().scale}
                componentData={component}
                componentStyle={componentStyle}
                deleteComponent={getDeleteComponentHandler(editor)}
                selectComponent={getSelectComponentHandler(editor)}
                addSelectedComponent={getAddSelectedComponentHandler(editor)}
                finishConnection={getFinishConnectionHandler(editor)}
                deleteConnection={getDeleteConnectionHandler(editor)}
                //moveConnection={handleMoveConnection}
                //moveCommandConnection={handleMoveCommandConnection}
              >
                {component.content()}
              </Component>
            );
          }}
        </For>

        <Show when={line()}>
          <Line position={line()?.position!} color={line()?.color ?? "black"} />
        </Show>
        <For each={Object.values(lines)}>
          {(line) => (
            <Line position={line.position} color={line.color ?? "black"} />
          )}
        </For>
      </div>
    </div>
  );
}

// Контроллер редактора

import { BotStatus, EditorData } from "../types";
import { Position } from "../shared/types";
import type EditorState from "./EditorState";
import WaitingState from "./states/WaitingState";
import { getRelativeMousePosition } from "./halpers/mouse";
import ComponentController from "./ComponentController";
import Logger from "~/logging/Logger";
import AddingComponentState from "./states/AddingComponentState";
import {
  SpecificComponent,
  SpecificComponentCreator,
} from "./SpecificComponent";
import ConnectionController from "./ConnectionController";
import LineStore from "./EditorStorage/LineStore";
import ConnectionState from "./states/ConnectionState";
import { HTTPResponse, checkPromise } from "~/api/HTTPResponse";
import { EditorClient } from "./api/EditorClient";
import ComponentStore from "./EditorStorage/ComponentStorage/ComponentStore";
import { StartComponentController } from "./components/StartComponent";
import { APIComponentData, APIComponentType } from "./api/types";
import { StartContent } from "../components/ComponentContent/contents/StartContent";
import { ConditionComponentController } from "./components/ConditionComponent";
import { ConditionContent } from "../components/ComponentContent/contents/ConditionContent";
import { MessageContent } from "../components/ComponentContent/contents/MessageContent";
import { MessageComponentController } from "./components/MessageComponent";
import { TextInputComponentController } from "./components/TextInputComponent";
import { TextInputContent } from "../components/ComponentContent/contents/TextInputContent";
import { FormatComponentController } from "./components/FormatComponent";
import { FormatContent } from "../components/ComponentContent/contents/FormatContent";
import { ButtonComponentController } from "./components/ButtonComponent";
import { ButtonContent } from "../components/ComponentContent/contents/ButtonContent";
import BotClient from "~/api/bot/BotClient";

export default class EditorController {
  private readonly zoomSize = 0.05;
  private editorState: EditorState = new WaitingState(this);
  private editorArea?: HTMLElement;
  private _components: ComponentController;
  private _connections: ConnectionController;

  constructor(
    private editor: EditorData,
    private _client: EditorClient,
    private logger: Logger
  ) {
    const componentStore = new ComponentStore(...editor.componentStore);
    this._components = new ComponentController(this, componentStore, logger);
    this._connections = new ConnectionController(
      this,
      new LineStore(...editor.lineStore),
      componentStore
    );
  }
  get client() {
    return this._client;
  }
  get connections() {
    return this._connections;
  }
  get components() {
    return this._components;
  }
  get state() {
    return this.editorState;
  }
  get addingComponent() {
    return this.editor.addingComponent;
  }
  get area() {
    return this.editorArea;
  }
  get setUserSelect() {
    return this.editor.setUserSelect;
  }
  get line() {
    return this.editor.line;
  }

  get error() {
    return this.editor.error;
  }

  async init() {
    this.getBotStatus();
    const [components, error] = await this.httpRequest(() =>
      this._client.getComponents()
    );
    if (error) {
      this.editor.error.set(error);
      return;
    }
    if (components) {
      for (const component of components) {
        let abitityToDelete = true;
        if (component.type == APIComponentType.Start) {
          abitityToDelete = false;
        }
        const specificComponent = this.createSpecificComponent(component);
        if (specificComponent) {
          this.components.add(
            component.id,
            component.position,
            specificComponent,
            {},
            abitityToDelete
          );
          for (const [_, value] of Object.entries(component.connectionPoints)) {
            this.components.addConnectionPoint(
              component.id,
              value.sourceComponentId,
              value.sourcePointName,
              value.relativePointPosition
            );
          }
        } else {
          this.editor.error.set(
            new Error(
              `This type of component does not exist: ${component.type}`
            )
          );
          return;
        }
      }
    }
    this.connections.addLinesBetweenComponents();
  }

  selectComponent(id: number, mousePosition: Position) {
    this.editorState.selectComponent(id, mousePosition);
  }

  setEditorArea(editorArea?: HTMLElement) {
    this.editorArea = editorArea;
  }

  startConnection(
    componentId: number,
    pointId: string,
    clientPosition: Position,
    pointColor: string
  ) {
    this.editorState.startConnection(
      componentId,
      pointId,
      this.getRelativeMousePosition(clientPosition),
      pointColor
    );
  }
  finishConnection(
    componentId: number,
    connectionPosition: Position,
    relativePointPosition: Position
  ) {
    this.editorState.finishConnection(
      componentId,
      connectionPosition,
      relativePointPosition
    );
  }
  deleteConnection(
    targetComponentId: number,
    sourceComponentId: number,
    sourcePointId: string,
    clientPosition: Position
  ) {
    const line = this.connections.getLine(sourceComponentId, sourcePointId);

    this.connections.delete(
      targetComponentId,
      sourceComponentId,
      sourcePointId
    );

    this.setState(
      new ConnectionState(
        this,
        {
          componentId: sourceComponentId,
          pointId: sourcePointId,
          pointPosition: line.position.start,
        },
        this.getRelativeMousePosition(clientPosition),
        line.color
      )
    );
  }
  handleMouseDown(event: MouseEvent) {
    this.editorState.handleMouseDown(event);
  }
  handleMouseMove(event: MouseEvent) {
    this.editorState.handleMouseMove(event);
  }
  handleMouseUp(event: MouseEvent) {
    this.editorState.handleMouseUp(event);
  }
  setState(state: EditorState) {
    this.logger.info("Editor: state changed to " + state.name);
    this.editorState = state;
  }

  getRelativeMousePosition(mousePosition: Position): Position {
    let relativeMousePosition = { x: 0, y: 0 };
    if (this.editorArea) {
      relativeMousePosition = getRelativeMousePosition(
        this.editorArea,
        mousePosition,
        this.editor.scale.get()
      );
    }
    return relativeMousePosition;
  }

  startAddingComponent(event: MouseEvent, creator: SpecificComponentCreator) {
    this.setState(new AddingComponentState(this, event, creator));
  }
  zoomIn() {
    this.editor.scale.set((scale) => scale + this.zoomSize);
  }
  zoomOut() {
    this.editor.scale.set((scale) => scale - this.zoomSize);
  }
  private async getBotStatus() {
    const [status, error] = await this.httpRequest(() =>
      this._client.getBotStatus()
    );
    if (error) {
      this.editor.error.set(error);
      return;
    }
    if (status == 1) {
      this.editor.bot.status.set(BotStatus.Running);
    } else {
      this.editor.bot.status.set(BotStatus.Stopped);
    }
  }
  async stopBot() {
    const [_, error] = await this.httpRequest(() => this._client.stopBot());
    if (error) {
      this.editor.error.set(error);
      return;
    }
    this.editor.bot.status.set(BotStatus.Stopped);
  }

  async httpRequest<T>(
    request: () => Promise<HTTPResponse<T>>
  ): Promise<[T | undefined, Error | undefined]> {
    this.editor.setLoading(true);
    try {
      const response = await checkPromise(request(), this.logger);
      if (response.statusUnauthorized()) {
        this.editor.navigate("/signin");
      }
      response.check();
      return [response.data, undefined];
    } catch (e) {
      return [undefined, e as Error];
    } finally {
      this.editor.setLoading(false);
    }
  }
  createSpecificComponent(
    component: APIComponentData
  ): SpecificComponent | undefined {
    switch (component.type) {
      case APIComponentType.Start: {
        const controller = new StartComponentController(this, component.id);

        return [
          controller,
          () => (
            <StartContent
              outputs={component.outputs}
              handlers={controller.getHandlers()}
            />
          ),
        ];
      }
      case APIComponentType.Condition: {
        const controller = new ConditionComponentController(this, component.id);

        return [
          controller,
          () => (
            <ConditionContent
              data={component.data}
              outputs={component.outputs}
              handlers={controller.getHandlers()}
            />
          ),
        ];
      }
      case APIComponentType.Message: {
        const controller = new MessageComponentController(this, component.id);

        return [
          controller,
          () => (
            <MessageContent
              data={component.data}
              outputs={component.outputs}
              handlers={controller.getHandlers()}
            />
          ),
        ];
      }
      case APIComponentType.TextInput: {
        const controller = new TextInputComponentController(this, component.id);

        return [
          controller,
          () => (
            <TextInputContent
              data={component.data}
              outputs={component.outputs}
              handlers={controller.getHandlers()}
            />
          ),
        ];
      }
      case APIComponentType.Format: {
        const controller = new FormatComponentController(this, component.id);

        return [
          controller,
          () => (
            <FormatContent
              data={component.data}
              outputs={component.outputs}
              handlers={controller.getHandlers()}
            />
          ),
        ];
      }
      case APIComponentType.Buttons: {
        const controller = new ButtonComponentController(
          this,
          component.id,
          component.data.buttons,
          component.outputs
        );

        return [
          controller,
          () => (
            <ButtonContent
              data={{
                text: component.data.text,
                buttons: controller.buttons(),
              }}
              handlers={controller.getHandlers()}
              abilityToAdd={controller.abilityToAdd()}
            />
          ),
        ];
      }
      default: {
        return undefined;
      }
    }
  }
}
